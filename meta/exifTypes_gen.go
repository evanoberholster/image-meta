package meta

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Aperture) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 float32
		zb0001, err = dc.ReadFloat32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Aperture(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Aperture) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteFloat32(float32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Aperture) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendFloat32(o, float32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Aperture) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 float32
		zb0001, bts, err = msgp.ReadFloat32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Aperture(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Aperture) Msgsize() (s int) {
	s = msgp.Float32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExposureBias) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureBias(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExposureBias) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExposureBias) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExposureBias) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureBias(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExposureBias) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExposureMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExposureMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExposureMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExposureMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExposureMode) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExposureProgram) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureProgram(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExposureProgram) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExposureProgram) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExposureProgram) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureProgram(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExposureProgram) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FlashMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FlashMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FlashMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FlashMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FlashMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FlashMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FlashMode) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FocalLength) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 float32
		zb0001, err = dc.ReadFloat32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FocalLength(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FocalLength) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteFloat32(float32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FocalLength) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendFloat32(o, float32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FocalLength) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 float32
		zb0001, bts, err = msgp.ReadFloat32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FocalLength(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FocalLength) Msgsize() (s int) {
	s = msgp.Float32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MeteringMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MeteringMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MeteringMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MeteringMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MeteringMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MeteringMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MeteringMode) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShutterSpeed) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(2) {
		err = msgp.ArrayError{Wanted: uint32(2), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShutterSpeed) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(2))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for za0001 := range z {
		err = en.WriteUint16(z[za0001])
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShutterSpeed) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(2))
	for za0001 := range z {
		o = msgp.AppendUint16(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShutterSpeed) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(2) {
		err = msgp.ArrayError{Wanted: uint32(2), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShutterSpeed) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (2 * (msgp.Uint16Size))
	return
}
